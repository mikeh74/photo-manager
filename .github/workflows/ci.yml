name: CI/CD

on:
  push:
    # branches: [main, develop]
    branches: [dummy]
  pull_request:
    branches: [dummy]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libmagic1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        if: matrix.python-version == env.PYTHON_VERSION

      - name: Run tests
        run: |
          pytest tests/ --cov=photo_manager --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # security:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: Set up Python
  #       uses: actions/setup-python@v6
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install bandit[toml] safety

  #     - name: Run bandit security linter
  #       run: bandit -r photo_manager/ -f json -o bandit-report.json

  #     - name: Run safety check
  #       run: safety check --json --output safety-report.json
  #       continue-on-error: true

  #     - name: Upload security reports
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: security-reports
  #         path: |
  #           bandit-report.json
  #           safety-report.json

  build:
    runs-on: ubuntu-latest
    # needs: [test, security]
    needs: [test]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # publish:
    # runs-on: ubuntu-latest
    # needs: [build]
    # if: github.event_name == 'release' && github.event.action == 'published'
    # environment: release
    # permissions:
    #   id-token: write
    # steps:
    #   - name: Download build artifacts
    #     uses: actions/download-artifact@v5
    #     with:
    #       name: dist
    #       path: dist/

    #   - name: Publish to PyPI
    #     uses: pypa/gh-action-pypi-publish@release/v1
    #     with:
    #       password: ${{ secrets.PYPI_API_TOKEN }}
